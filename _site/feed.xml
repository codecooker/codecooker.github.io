<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-Hans"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="zh-Hans" /><updated>2018-03-04T18:00:57+08:00</updated><id>http://localhost:4000/</id><title type="html">Codecooker’s blog</title><subtitle>Codecooker's Blog
</subtitle><author><name>codecooker</name><email>codecooker@outlook.com</email></author><entry><title type="html">Mac用户构建Linux开发环境</title><link href="http://localhost:4000/linux/2017/12/10/Mac%E7%94%A8%E6%88%B7%E6%9E%84%E5%BB%BALinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html" rel="alternate" type="text/html" title="Mac用户构建Linux开发环境" /><published>2017-12-10T00:00:00+08:00</published><updated>2017-12-10T00:00:00+08:00</updated><id>http://localhost:4000/linux/2017/12/10/Mac%E7%94%A8%E6%88%B7%E6%9E%84%E5%BB%BALinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83</id><content type="html" xml:base="http://localhost:4000/linux/2017/12/10/Mac%E7%94%A8%E6%88%B7%E6%9E%84%E5%BB%BALinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html">&lt;p&gt;最近可能会从Mac暂时迁移至Linux环境进行常规软件开发，所以本周末利用空隙时间从Linux发行版本到常用软件再到开发环境的准备做了一个大致的梳理。由于我是重度Mac使用者，所以我会分大概3篇文章来说明怎么准备一个Linux系统便于Mac重度开发者迁移。&lt;/p&gt;

&lt;h3 id=&quot;发行版的选择&quot;&gt;发行版的选择&lt;/h3&gt;
&lt;p&gt;在发行版的选择上，本人也有过纠结，毕竟Linux发行版众多，选出一种合适的发行版确实是一个头疼的事儿。经过慎重考虑，我从Centos、Fedora、ArchLinux、Ubuntu、LinuxMint中选择了LinuxMint。具体原因如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LinuxMint是基于Ubuntu的发行版，在Ubuntu的基础了做了一些改变。Ubuntu的优点就是软件支持性好，生态好，这样其实LinuxMint也就可以轻松的借力Ubuntu的软件和社区力量&lt;/li&gt;
  &lt;li&gt;LinuxMint的桌面环境为基于GNOME Shell的Cinnamon及基于GNOME 2的MATE，另有KDE及Xfce的独立版本可供选择。这个对于不喜欢unity的人是个很好的选择&lt;/li&gt;
  &lt;li&gt;LinuxMint入门很简单，开闭源驱动支持的很好，当然这点跟Ubuntu没啥区别&lt;/li&gt;
  &lt;li&gt;家里电脑也装的这个系统&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Linux Mint是由Linux Mint Team团队于2006年开始发行，是一份基于Debian和Ubuntu的Linux发行版。其目标是提供一种更完整的即刻可用体验，这包括提供浏览器插件、多媒体编解码器、对DVD播放的支持、Java和其他组件，它也增加了一套定制桌面及各种菜单，一些独特的配置工具，以及一份基于web的软件包安装界面。Linux Mint是对用户友好而功能强大的操作系统。它诞生的目的是为家庭用户和企业提供一个免费的，易用的，舒适而优雅的桌面操作系统。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;版本选择&quot;&gt;版本选择&lt;/h3&gt;
&lt;p&gt;这个不用太纠结，直接选择最新的就行。现在家里用的是半年前安装的18.1，昨天做了最新的安装镜像，18.3，如果条件允许的话，用最新的系统应该不会有什么坏处。这点上不像Ubuntu会有LTS版本，让我这些选择恐惧症的人在这个节点不知道是选择16.04还是明年的18.04&lt;/p&gt;

&lt;h3 id=&quot;制作安装镜像&quot;&gt;制作安装镜像&lt;/h3&gt;
&lt;h4 id=&quot;第一步下载镜像&quot;&gt;第一步，下载镜像&lt;/h4&gt;
&lt;p&gt;首先下载最新的安装镜像，这个可以直接从官网获取。点击&lt;a href=&quot;https://linuxmint.com/download.php&quot;&gt;这里打开&lt;/a&gt;，记得选择比较近的节点进行下载，中科大有个源是支持的，可以在下载的时候进行选择&lt;/p&gt;
&lt;h4 id=&quot;第二步制作安装盘&quot;&gt;第二步，制作安装盘&lt;/h4&gt;
&lt;p&gt;准备一个不小于2G的优盘，不小于4G最好。下载&lt;a href=&quot;https://www.pendrivelinux.com/tag/universal-usb-installer/&quot;&gt;Universal USB Installer&lt;/a&gt;，按照提示一步一步的操作就行，如图(网上盗的图，见谅)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.tweaking4all.nl/wp-content/uploads/sites/2/2014/07/universal-usb-installer-create.jpg&quot; alt=&quot;universal-usb-installer-create&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;制作完成安装镜像后，就可以重启电脑，然后选择由优盘引导启动进行安装了。这个是Live
CD制作的，可以在体验的过程中完成安装。如果是初次安装Linux的话，一点要有几点注意事项：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;双系统的话切记备份重要数据再开始安装&lt;/li&gt;
  &lt;li&gt;不要被那么多的挂载点搞晕，一般情况下，一个swap分区+一个/挂载点就可以了。因为之所以那么多挂载点历史原因比较大&lt;/li&gt;
  &lt;li&gt;如果是SSD+HDD的电脑，可以外加一个home挂载点，可选一个opt挂载点，这两个挂载点分区至HDD，/挂载点分区至SSD。新的MBR可以写在另一块硬盘上&lt;/li&gt;
  &lt;li&gt;最好备用网线链接网络的方式，因为无线网卡很有可能并不能正确的安装驱动&lt;/li&gt;
  &lt;li&gt;如果显卡过新，安装完后可能会导致驱动没有，这个问题也不要惊恐，据我发现，一般A卡的开源驱动都是不错的，N卡的话官方有提供驱动，按照型号去下载安装&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;安装完成&quot;&gt;安装完成&lt;/h3&gt;
&lt;p&gt;安装过程一般会很快完成，完成后就可以进行体验了。下一篇我会重点说下如果打造一个和MacOS很相近的开发系统，然后会根据不同的工种开分别说下搭建环境的问题。&lt;/p&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="Linux" /><category term="Mac" /><category term="Linux" /><summary type="html">最近可能会从Mac暂时迁移至Linux环境进行常规软件开发，所以本周末利用空隙时间从Linux发行版本到常用软件再到开发环境的准备做了一个大致的梳理。由于我是重度Mac使用者，所以我会分大概3篇文章来说明怎么准备一个Linux系统便于Mac重度开发者迁移。 发行版的选择 在发行版的选择上，本人也有过纠结，毕竟Linux发行版众多，选出一种合适的发行版确实是一个头疼的事儿。经过慎重考虑，我从Centos、Fedora、ArchLinux、Ubuntu、LinuxMint中选择了LinuxMint。具体原因如下： LinuxMint是基于Ubuntu的发行版，在Ubuntu的基础了做了一些改变。Ubuntu的优点就是软件支持性好，生态好，这样其实LinuxMint也就可以轻松的借力Ubuntu的软件和社区力量 LinuxMint的桌面环境为基于GNOME Shell的Cinnamon及基于GNOME 2的MATE，另有KDE及Xfce的独立版本可供选择。这个对于不喜欢unity的人是个很好的选择 LinuxMint入门很简单，开闭源驱动支持的很好，当然这点跟Ubuntu没啥区别 家里电脑也装的这个系统 Linux Mint是由Linux Mint Team团队于2006年开始发行，是一份基于Debian和Ubuntu的Linux发行版。其目标是提供一种更完整的即刻可用体验，这包括提供浏览器插件、多媒体编解码器、对DVD播放的支持、Java和其他组件，它也增加了一套定制桌面及各种菜单，一些独特的配置工具，以及一份基于web的软件包安装界面。Linux Mint是对用户友好而功能强大的操作系统。它诞生的目的是为家庭用户和企业提供一个免费的，易用的，舒适而优雅的桌面操作系统。 版本选择 这个不用太纠结，直接选择最新的就行。现在家里用的是半年前安装的18.1，昨天做了最新的安装镜像，18.3，如果条件允许的话，用最新的系统应该不会有什么坏处。这点上不像Ubuntu会有LTS版本，让我这些选择恐惧症的人在这个节点不知道是选择16.04还是明年的18.04 制作安装镜像 第一步，下载镜像 首先下载最新的安装镜像，这个可以直接从官网获取。点击这里打开，记得选择比较近的节点进行下载，中科大有个源是支持的，可以在下载的时候进行选择 第二步，制作安装盘 准备一个不小于2G的优盘，不小于4G最好。下载Universal USB Installer，按照提示一步一步的操作就行，如图(网上盗的图，见谅) 安装 制作完成安装镜像后，就可以重启电脑，然后选择由优盘引导启动进行安装了。这个是Live CD制作的，可以在体验的过程中完成安装。如果是初次安装Linux的话，一点要有几点注意事项： 双系统的话切记备份重要数据再开始安装 不要被那么多的挂载点搞晕，一般情况下，一个swap分区+一个/挂载点就可以了。因为之所以那么多挂载点历史原因比较大 如果是SSD+HDD的电脑，可以外加一个home挂载点，可选一个opt挂载点，这两个挂载点分区至HDD，/挂载点分区至SSD。新的MBR可以写在另一块硬盘上 最好备用网线链接网络的方式，因为无线网卡很有可能并不能正确的安装驱动 如果显卡过新，安装完后可能会导致驱动没有，这个问题也不要惊恐，据我发现，一般A卡的开源驱动都是不错的，N卡的话官方有提供驱动，按照型号去下载安装 安装完成 安装过程一般会很快完成，完成后就可以进行体验了。下一篇我会重点说下如果打造一个和MacOS很相近的开发系统，然后会根据不同的工种开分别说下搭建环境的问题。</summary></entry><entry><title type="html">Java泛型函数</title><link href="http://localhost:4000/java/2017/08/21/Java%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0.html" rel="alternate" type="text/html" title="Java泛型函数" /><published>2017-08-21T00:00:00+08:00</published><updated>2017-08-21T00:00:00+08:00</updated><id>http://localhost:4000/java/2017/08/21/Java%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0</id><content type="html" xml:base="http://localhost:4000/java/2017/08/21/Java%E6%B3%9B%E5%9E%8B%E5%87%BD%E6%95%B0.html">&lt;h3 id=&quot;背景&quot;&gt;背景&lt;/h3&gt;
&lt;p&gt;PHP的Array以方便灵活著称，再加上丰富的库函数，可以让开发者灵活的应对大部分需求。经常和数据库打交道的同学，肯定熟悉这个方法&lt;code class=&quot;highlighter-rouge&quot;&gt;array_column&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;array_column() 返回input数组中键值为column_key的列， 如果指定了可选参数index_key，那么input数组中的这一列的值将作为返回数组中对应值的键。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;做Java后，我们也常碰到需要如此操作的场景，但并没有合适的库函数，于是本着解放劳动力的出发点，打算自己开发一个。但是由于Java是一个强类型语言，我们经常会碰到如此的类型&lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;，如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;codecooker&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;school&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStudentNameList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 原始的做法，我们需要遍历&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usInfo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;students&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;studentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;泛型方法&quot;&gt;泛型方法&lt;/h3&gt;
&lt;p&gt;解决方案是由于看到系统函数的实现有所启发，想到了泛型函数。下面从自己的理解对泛型函数做一个简单的解释&lt;br /&gt;
一般的泛型函数形式如下：  &lt;br /&gt;
 &lt;img src=&quot;/images/Java泛型函数/1503304195862.jpg&quot; alt=&quot;session的工作机制&quot; /&gt;
其中&lt;br /&gt;
&lt;strong&gt;1&lt;/strong&gt;表示在此泛型函数中我们定义要使用的泛型，这里只代表一个符号，可以试T也可以是&lt;br /&gt;
&lt;strong&gt;2&lt;/strong&gt;表示该泛型函数的返回类型，必须是已经定义过的类型，比如是T或者U&lt;br /&gt;
&lt;strong&gt;3&lt;/strong&gt;方法名&lt;br /&gt;
&lt;strong&gt;4&lt;/strong&gt;、&lt;strong&gt;5&lt;/strong&gt;参数列表&lt;br /&gt;
这里需要注意区分泛型方法和不同泛型类内使用泛型的方法的区别，例如:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 泛型方法&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clounms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 不同类成员方法，只不过是返回了一个类定义时的泛型列表&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getALl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其实，按照我的理解，最重要的区别就是是否有在方法定义时有泛型的定义过程，如果有则是泛型方法。&lt;/p&gt;

&lt;h3 id=&quot;实现array_column方法&quot;&gt;实现array_column方法&lt;/h3&gt;
&lt;p&gt;有了上面的铺垫，我们可以定义简单的泛型方法来实现&lt;code class=&quot;highlighter-rouge&quot;&gt;array_column&lt;/code&gt;的功能&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListUtil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clounms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如此，完成&lt;/p&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="Java" /><category term="Java" /><summary type="html">背景 PHP的Array以方便灵活著称，再加上丰富的库函数，可以让开发者灵活的应对大部分需求。经常和数据库打交道的同学，肯定熟悉这个方法array_column array_column() 返回input数组中键值为column_key的列， 如果指定了可选参数index_key，那么input数组中的这一列的值将作为返回数组中对应值的键。 做Java后，我们也常碰到需要如此操作的场景，但并没有合适的库函数，于是本着解放劳动力的出发点，打算自己开发一个。但是由于Java是一个强类型语言，我们经常会碰到如此的类型List&amp;lt;T&amp;gt;，如下： public class UserInfo { private String userName = &quot;codecooker&quot;; private Integer age = 18; } public class school { private List&amp;lt;UserInfo&amp;gt; students; public List&amp;lt;String&amp;gt; getStudentNameList() { // 原始的做法，我们需要遍历 List&amp;lt;String&amp;gt; studentName = new ArrayList&amp;lt;&amp;gt;(); for (UserInfo usInfo : this.students) { studentName.add(usInfo.userName); } return studentName; } } 泛型方法 解决方案是由于看到系统函数的实现有所启发，想到了泛型函数。下面从自己的理解对泛型函数做一个简单的解释 一般的泛型函数形式如下： 其中 1表示在此泛型函数中我们定义要使用的泛型，这里只代表一个符号，可以试T也可以是 2表示该泛型函数的返回类型，必须是已经定义过的类型，比如是T或者U 3方法名 4、5参数列表 这里需要注意区分泛型方法和不同泛型类内使用泛型的方法的区别，例如: public class Test&amp;lt;T&amp;gt; { // 泛型方法 public static &amp;lt;T,U&amp;gt; List&amp;lt;T&amp;gt; clounms(List&amp;lt;U&amp;gt; list, Function&amp;lt;U,T&amp;gt; function); // 不同类成员方法，只不过是返回了一个类定义时的泛型列表 public List&amp;lt;T&amp;gt; getALl(); } 其实，按照我的理解，最重要的区别就是是否有在方法定义时有泛型的定义过程，如果有则是泛型方法。 实现array_column方法 有了上面的铺垫，我们可以定义简单的泛型方法来实现array_column的功能 public class ListUtil { public static &amp;lt;T,U&amp;gt; List&amp;lt;T&amp;gt; clounms(List&amp;lt;U&amp;gt; list, Function&amp;lt;U,T&amp;gt; function) { List&amp;lt;T&amp;gt; result = new ArrayList&amp;lt;&amp;gt;(); for (U u : list) { result.add(function.apply(u)); } return result; } } 如此，完成</summary></entry><entry><title type="html">Linux安装PHP7.x</title><link href="http://localhost:4000/php/2017/02/17/Linux%E5%AE%89%E8%A3%85PHP7.x.html" rel="alternate" type="text/html" title="Linux安装PHP7.x" /><published>2017-02-17T00:00:00+08:00</published><updated>2017-02-17T00:00:00+08:00</updated><id>http://localhost:4000/php/2017/02/17/Linux%E5%AE%89%E8%A3%85PHP7.x</id><content type="html" xml:base="http://localhost:4000/php/2017/02/17/Linux%E5%AE%89%E8%A3%85PHP7.x.html">&lt;p&gt;众所周知，PHP7的性能和执行速度都有了很大的改进。恰逢最近公司的一些项目也在尝试着迁移到PHP7的环境，由于本人平时开发使用MAC和Linux，而且不愿意使用现成的批量部署工具（不是愿意重复造轮子，而是想知道到底安装了哪些东西）。所以就选择自己编译安装环境。&lt;/p&gt;

&lt;h3 id=&quot;获取源代码&quot;&gt;获取源代码&lt;/h3&gt;
&lt;p&gt;PHP源代码是开源的，我们可以在PHP的官方下载我们需要的源码包，这里我们以PHP7.1.1为例&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载源码&lt;/span&gt;
wget http://cn2.php.net/get/php-7.1.2.tar.gz/from/this/mirror
&lt;span class=&quot;c&quot;&gt;# 解压&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xvf mirror
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装依赖库&quot;&gt;安装依赖库&lt;/h3&gt;
&lt;p&gt;下面就列举下常用的Centos7.x和Ubuntu系的依赖安装&lt;/p&gt;
&lt;h4 id=&quot;centos&quot;&gt;Centos&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 包含扩展依赖的开发库&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel
&lt;span class=&quot;c&quot;&gt;# 包含编译源码必要的类库&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum groupinstall &lt;span class=&quot;s2&quot;&gt;&quot;Development Tools&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;libcurl4-openssl-dev libbz2-dev libssl-dev libxml2-dev libjpeg-dev libpng12-dev libfreetype6 libfreetype6-dev libgmp3-dev libmcrypt4 libmcrypt-dev libreadline-dev libxslt1.1 libxslt-dev  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;开始编译&quot;&gt;开始编译&lt;/h3&gt;
&lt;p&gt;进入我们的源码目录，首先配置安装。安装上所有常用的扩展。注意，这里的PHP的安装目录是&lt;em&gt;/alidata/server/php&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/alidata/server/php &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-config-file-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-fpm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-fpm-user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nginx  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-fpm-group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;nginx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-inline-optimization&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--disable-debug&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--disable-rpath&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-shared&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-soap&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-libxml-dir&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-xmlrpc&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-openssl&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-mcrypt&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-mhash&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-pcre-regex&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-sqlite3&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-zlib&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-bcmath&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-iconv&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-bz2&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-calendar&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-curl&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-cdb&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-dom&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-exif&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-fileinfo&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-filter&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-pcre-dir&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-ftp&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-gd&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-openssl-dir&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-jpeg-dir&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-png-dir&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-zlib-dir&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-freetype-dir&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-gd-native-ttf&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-gd-jis-conv&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-gettext&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-gmp&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-mhash&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-json&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-mbstring&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-mbregex&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-mbregex-backtrack&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-libmbfl&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-onig&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-pdo&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-mysqli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysqlnd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-pdo-mysql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysqlnd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-zlib-dir&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-pdo-sqlite&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-readline&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-session&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-shmop&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-simplexml&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-sockets&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-sysvmsg&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-sysvsem&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-sysvshm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-wddx&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-libxml-dir&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-xsl&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-zip&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-mysqlnd-compression-support&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-pear&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--enable-opcache&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--with-libdir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lib64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置和检查完依赖后，下来就要开始编译了&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make

&lt;span class=&quot;c&quot;&gt;# 如果一切顺利，make结束后，安装就行。如果安装目录没有当前用户的写权限，需要上sudo&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装完成&quot;&gt;安装完成&lt;/h3&gt;
&lt;p&gt;安装完成后，还需要做两小步骤&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;添加/alidata/server/php/lib/php到php.ini的include_path&lt;/li&gt;
  &lt;li&gt;添加/alidata/server/php/bin 到环境变量，方便后续使用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;至此，PHP安装完成&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  /etc php &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
PHP 7.1.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cli&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;built: Feb 17 2017 23:04:39&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; NTS &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1997-2017 The PHP Group
Zend Engine v3.1.0, Copyright &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 1998-2017 Zend Technologie
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;常见错误处理&quot;&gt;常见错误处理&lt;/h3&gt;
&lt;h4 id=&quot;centos7-安装报如下错误&quot;&gt;Centos7 安装报如下错误&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;libmcrypt libmcrypt-devel&lt;/code&gt;未找到，需要下载源码进行安装。默认安装在 /usr/local/lib&lt;/li&gt;
  &lt;li&gt;编辑文件/etc/ld.so.conf，添加/usr/local/lib到最后，执行ldconfig&lt;/li&gt;
&lt;/ul&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="PHP" /><category term="Linux" /><category term="Ubuntu" /><category term="Linuxmint" /><category term="PHP" /><summary type="html">众所周知，PHP7的性能和执行速度都有了很大的改进。恰逢最近公司的一些项目也在尝试着迁移到PHP7的环境，由于本人平时开发使用MAC和Linux，而且不愿意使用现成的批量部署工具（不是愿意重复造轮子，而是想知道到底安装了哪些东西）。所以就选择自己编译安装环境。 获取源代码 PHP源代码是开源的，我们可以在PHP的官方下载我们需要的源码包，这里我们以PHP7.1.1为例 # 下载源码 wget http://cn2.php.net/get/php-7.1.2.tar.gz/from/this/mirror # 解压 tar xvf mirror 安装依赖库 下面就列举下常用的Centos7.x和Ubuntu系的依赖安装 Centos # 包含扩展依赖的开发库 sudo yum install libxml2 libxml2-devel openssl openssl-devel bzip2 bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel # 包含编译源码必要的类库 sudo yum groupinstall &quot;Development Tools&quot; Ubuntu sudo apt-get install libcurl4-openssl-dev libbz2-dev libssl-dev libxml2-dev libjpeg-dev libpng12-dev libfreetype6 libfreetype6-dev libgmp3-dev libmcrypt4 libmcrypt-dev libreadline-dev libxslt1.1 libxslt-dev 开始编译 进入我们的源码目录，首先配置安装。安装上所有常用的扩展。注意，这里的PHP的安装目录是/alidata/server/php ./configure \ --prefix=/alidata/server/php \ --with-config-file-path=/etc \ --enable-fpm \ --with-fpm-user=nginx \ --with-fpm-group=nginx \ --enable-inline-optimization \ --disable-debug \ --disable-rpath \ --enable-shared \ --enable-soap \ --with-libxml-dir \ --with-xmlrpc \ --with-openssl \ --with-mcrypt \ --with-mhash \ --with-pcre-regex \ --with-sqlite3 \ --with-zlib \ --enable-bcmath \ --with-iconv \ --with-bz2 \ --enable-calendar \ --with-curl \ --with-cdb \ --enable-dom \ --enable-exif \ --enable-fileinfo \ --enable-filter \ --with-pcre-dir \ --enable-ftp \ --with-gd \ --with-openssl-dir \ --with-jpeg-dir \ --with-png-dir \ --with-zlib-dir \ --with-freetype-dir \ --enable-gd-native-ttf \ --enable-gd-jis-conv \ --with-gettext \ --with-gmp \ --with-mhash \ --enable-json \ --enable-mbstring \ --enable-mbregex \ --enable-mbregex-backtrack \ --with-libmbfl \ --with-onig \ --enable-pdo \ --with-mysqli=mysqlnd \ --with-pdo-mysql=mysqlnd \ --with-zlib-dir \ --with-pdo-sqlite \ --with-readline \ --enable-session \ --enable-shmop \ --enable-simplexml \ --enable-sockets \ --enable-sysvmsg \ --enable-sysvsem \ --enable-sysvshm \ --enable-wddx \ --with-libxml-dir \ --with-xsl \ --enable-zip \ --enable-mysqlnd-compression-support \ --with-pear \ --enable-opcache \ --with-libdir=lib64 配置和检查完依赖后，下来就要开始编译了 make # 如果一切顺利，make结束后，安装就行。如果安装目录没有当前用户的写权限，需要上sudo sudo make install 安装完成 安装完成后，还需要做两小步骤 添加/alidata/server/php/lib/php到php.ini的include_path 添加/alidata/server/php/bin 到环境变量，方便后续使用 至此，PHP安装完成 ➜ /etc php -v PHP 7.1.2 (cli) (built: Feb 17 2017 23:04:39) ( NTS ) Copyright (c) 1997-2017 The PHP Group Zend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologie 常见错误处理 Centos7 安装报如下错误 libmcrypt libmcrypt-devel未找到，需要下载源码进行安装。默认安装在 /usr/local/lib 编辑文件/etc/ld.so.conf，添加/usr/local/lib到最后，执行ldconfig</summary></entry><entry><title type="html">ThinkPHP定时任务（二）</title><link href="http://localhost:4000/php/2017/01/23/ThinkPHP%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E4%BA%8C.html" rel="alternate" type="text/html" title="ThinkPHP定时任务（二）" /><published>2017-01-23T00:00:00+08:00</published><updated>2017-01-23T00:00:00+08:00</updated><id>http://localhost:4000/php/2017/01/23/ThinkPHP%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1(%E4%BA%8C)</id><content type="html" xml:base="http://localhost:4000/php/2017/01/23/ThinkPHP%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E4%BA%8C.html">&lt;p&gt;前面说了TP框架中定时任务实现，也对存在的问题和优势做了一个简单的分析。如果有兴趣看的朋友可以参看&lt;a href=&quot;http://codecooker.cn/2017/ThinkPHP%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E4%B8%80/&quot; title=&quot;ThinkPHP定时任务（一&quot;&gt;ThinkPHP定时任务（一）&lt;/a&gt;。这篇主要对基于传统定时任务crontab[守护进程]，外加TP框架支持实现的基于TP的定时任务&lt;/p&gt;

&lt;h3 id=&quot;动机&quot;&gt;动机&lt;/h3&gt;
&lt;p&gt;用过TP的朋友都知道，TP框架是一个由国人开发的很优秀且轻量的PHP Web框架。由于其丰富的文档和强大的用户群体，在国内有不错的保有量。记得之前项目之初选择框架的时候，朋友建议选择TP，给的建议就是用户群体大，便于招人。&lt;br /&gt;
TP在Web模式下获得除了不俗的成绩，但是在非CGI模式下，通常（CLI），缺罕有人用。究其原因，个人觉得，无外乎以下几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文档解释的比较少&lt;/li&gt;
  &lt;li&gt;对CLI模式本身支持的比较简单&lt;/li&gt;
  &lt;li&gt;有这样前后台执行需求的用户大多选择了laravel等国际框架&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然而，我们的工程确实是用TP开发，为了保证代码结构统一，不用重复造轮子。就难免需要探索下TP框架下怎么实现后台任务的执行，如果这个问题解决了，再结合crontab就能找到我们想要的解决方案&lt;/p&gt;

&lt;h3 id=&quot;tp框架的mode&quot;&gt;TP框架的Mode&lt;/h3&gt;
&lt;p&gt;mode即是指应用模式，TP文档中是这么说明的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;应用模式提供了对核心框架进行改造的机会，可以让你的应用适应更多的环境和不同的要求。
每个应用模式有自己的模式定义文件，用于配置当前模式需要加载的核心文件和配置文件，以及别名定义、行为扩展定义等等。根据模式定义文件的定义位置和入口是否需要定义模式，可以分为显式应用模式和隐含应用模式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而这里，我们要使用的就是TP3.2自带的&lt;em&gt;api&lt;/em&gt;模式，要开启api模式，我们只需要做如下简单的配置&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//cli模式&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'APP_MODE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'api'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个宏有默认值，如果我们没有定义的的话，会在应用的入口自动设置为我们的常用模式&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'APP_MODE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'APP_MODE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s1&quot;&gt;'common'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 应用模式 默认为普通模式   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;关于api模式的配置文件，可以参考&lt;code class=&quot;highlighter-rouge&quot;&gt;Think/mode/api.php&lt;/code&gt;，里边有对内置api应用模式的基础配置，我们可以根据我们的需求进行改写，或者通过配置覆写系统配置。而我们常用的普通模式就是该目录下的common.php，大家可以对比进行学习&lt;/p&gt;

&lt;h3 id=&quot;兼容配置&quot;&gt;兼容配置&lt;/h3&gt;

&lt;h4 id=&quot;app_path-配置&quot;&gt;APP_PATH 配置&lt;/h4&gt;
&lt;p&gt;由于我们的应用是在普通模式下工作的，当我们在调用API模式时，肯定希望应用目录保持一致，这样就不用做任何代码的迁移和改动。在api模式中加入如下配置&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 定义应用目录,同样指向common模式下的app目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'APP_PATH'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../Apps/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;app_status-配置&quot;&gt;APP_STATUS 配置&lt;/h4&gt;
&lt;p&gt;起先，本人以为截止上一步就完成了所有配置。但是在调试的过程中，发现数据库无法连接，最终定位到。APPS目录中的配置没有正常加载。这个过程是个比较长的调试过程，具体就不表了。查看源代码发现，common模式下的所有配置是在&lt;code class=&quot;highlighter-rouge&quot;&gt;Think/Libary/Think/Dispatcher.class.php&lt;/code&gt;中进行引入的，其中有如下代码，是完成&lt;code class=&quot;highlighter-rouge&quot;&gt;MODULE&lt;/code&gt;中配置的加载的，有兴趣的同学可以自己看看&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 当前应用状态对应的配置文件&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;APP_STATUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;is_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MODULE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Conf/'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;APP_STATUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONF_EXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MODULE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Conf/'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;APP_STATUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONF_EXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 加载模块别名定义&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;is_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MODULE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Conf/alias.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Think&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MODULE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Conf/alias.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 加载模块tags文件定义&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;is_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MODULE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Conf/tags.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;Hook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MODULE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Conf/tags.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 加载模块函数文件&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;is_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MODULE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Common/function.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MODULE_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Common/function.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 加载模块的扩展配置文件&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;load_ext_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MODULE_PATH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同样找到&lt;code class=&quot;highlighter-rouge&quot;&gt;Think/Mode/Api/Dispatcher.class.php&lt;/code&gt;,在合适的时机添加上述加载代码(本人TP3.2是在146行开始加的)，这样后就可加载&lt;code class=&quot;highlighter-rouge&quot;&gt;MODULE&lt;/code&gt;中配置。&lt;br /&gt;
至此，所有的配置均已完成，下来我们来看看怎么操作。&lt;/p&gt;

&lt;h3 id=&quot;目录结构&quot;&gt;目录结构&lt;/h3&gt;
&lt;p&gt;先看看我这边的目录结构吧，便于后续表述&lt;/p&gt;

&lt;pre&gt;
    PROJECT
        - APPS
            + module_1
            + module_2
        - Crons
            + crons.conf
            + curl_runloop.sh
            + daemon.sh
            + exec.php
            + runloop.sh
            + start.sh
&lt;/pre&gt;

&lt;p&gt;Crons就是我们的定时任务目录，这里我着重说一下Crons目录下各个文件的用途吧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;crons.conf 定时任务的配置文件，配置了要执行什么定时任务&lt;/li&gt;
  &lt;li&gt;curl_runloop.sh 通过url调用时的runloop脚本&lt;/li&gt;
  &lt;li&gt;daemon.sh 守护进程&lt;/li&gt;
  &lt;li&gt;runloop.sh 直接PHP调用的runloop脚本&lt;/li&gt;
  &lt;li&gt;exec.php命令执行脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;如何执行&quot;&gt;如何执行&lt;/h3&gt;
&lt;p&gt;有了上面的铺垫，启动脚本其实很简单，如下：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;php&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;php&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script_path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里做个简单的说明，比如我们之前的访问的URL如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-url&quot;&gt;http://xxx.com/abc/controller/action
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们的script_path的值应该传:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样即可调用的我们的对应方法，完成后台执行&lt;/p&gt;

&lt;h3 id=&quot;时间控制&quot;&gt;时间控制&lt;/h3&gt;
&lt;p&gt;定时任务肯定逃不过计划执行时间，轮训时间。这里我从controller层做了些许限制。当然也可以在runloop中去做。将配置信息写在crons.conf中。进行配置既可&lt;br /&gt;
建立一个用于执行定时任务的基类来统一处理调度和并发逻辑。需要能别后台调用起的定时任务需要继承该基类，完成基础功能。主要涉及的一下几个地方。&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// cronbaseclass 实现&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 多少时间执行一次&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 检测是否有权限调用&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PHP_SAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cli'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;in_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get_client_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CRONS_BIND_IP'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'what a fucking day!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 入口方法&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;set_time_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$exe_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cron_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONTROLLER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACTION_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$exe_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;update_cron_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONTROLLER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACTION_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$lock_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RUNTIME_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;md5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CONTROLLER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ACTION_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lock_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lock_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lock_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 子类逻辑执行方法&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;runloop&quot;&gt;runloop&lt;/h3&gt;
&lt;p&gt;runloop 其实很简单，就是一个死循环，然后去读取配置文件，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;php exec.php xxx&lt;/code&gt;去执行脚本任务。特别需要注意的&lt;code class=&quot;highlighter-rouge&quot;&gt;daemon.sh&lt;/code&gt;脚本，是我们统一守护进程。crontab中需要进行配置如下：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 守护进程守护runloop.sh进程，去执行release环境[APP_STATUS]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; daemon.sh runloop.sh release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;结语&quot;&gt;结语&lt;/h3&gt;
&lt;p&gt;到现在，我们所有的配置和执行方案已经分析完成。根据这些配置，大家可以灵活的组织各种定时情况。&lt;br /&gt;
其实每个框架都有自身的强大之处和不足，只要根据它的特性和设计方案出发，一般都能找到合适的方案。自己碰到的问题，相信框架的设计者也有所涉及。本文其实就是在TP的框架中做了一些小的改动来支持定时任务。&lt;/p&gt;

&lt;h3 id=&quot;附录&quot;&gt;附录&lt;/h3&gt;

&lt;h4 id=&quot;cronsconf内容格式&quot;&gt;crons.conf内容格式&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Agreement/CCallback
Agreement/Achive
Agreement/SynchronizeStatus
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="PHP" /><category term="PHP" /><category term="ThinkPHP" /><summary type="html">前面说了TP框架中定时任务实现，也对存在的问题和优势做了一个简单的分析。如果有兴趣看的朋友可以参看ThinkPHP定时任务（一）。这篇主要对基于传统定时任务crontab[守护进程]，外加TP框架支持实现的基于TP的定时任务 动机 用过TP的朋友都知道，TP框架是一个由国人开发的很优秀且轻量的PHP Web框架。由于其丰富的文档和强大的用户群体，在国内有不错的保有量。记得之前项目之初选择框架的时候，朋友建议选择TP，给的建议就是用户群体大，便于招人。 TP在Web模式下获得除了不俗的成绩，但是在非CGI模式下，通常（CLI），缺罕有人用。究其原因，个人觉得，无外乎以下几点： 文档解释的比较少 对CLI模式本身支持的比较简单 有这样前后台执行需求的用户大多选择了laravel等国际框架 然而，我们的工程确实是用TP开发，为了保证代码结构统一，不用重复造轮子。就难免需要探索下TP框架下怎么实现后台任务的执行，如果这个问题解决了，再结合crontab就能找到我们想要的解决方案 TP框架的Mode mode即是指应用模式，TP文档中是这么说明的： 应用模式提供了对核心框架进行改造的机会，可以让你的应用适应更多的环境和不同的要求。 每个应用模式有自己的模式定义文件，用于配置当前模式需要加载的核心文件和配置文件，以及别名定义、行为扩展定义等等。根据模式定义文件的定义位置和入口是否需要定义模式，可以分为显式应用模式和隐含应用模式。 而这里，我们要使用的就是TP3.2自带的api模式，要开启api模式，我们只需要做如下简单的配置 //cli模式 define('APP_MODE','api'); 这个宏有默认值，如果我们没有定义的的话，会在应用的入口自动设置为我们的常用模式 defined('APP_MODE') or define('APP_MODE', 'common'); // 应用模式 默认为普通模式 关于api模式的配置文件，可以参考Think/mode/api.php，里边有对内置api应用模式的基础配置，我们可以根据我们的需求进行改写，或者通过配置覆写系统配置。而我们常用的普通模式就是该目录下的common.php，大家可以对比进行学习 兼容配置 APP_PATH 配置 由于我们的应用是在普通模式下工作的，当我们在调用API模式时，肯定希望应用目录保持一致，这样就不用做任何代码的迁移和改动。在api模式中加入如下配置 // 定义应用目录,同样指向common模式下的app目录 define('APP_PATH','../Apps/'); APP_STATUS 配置 起先，本人以为截止上一步就完成了所有配置。但是在调试的过程中，发现数据库无法连接，最终定位到。APPS目录中的配置没有正常加载。这个过程是个比较长的调试过程，具体就不表了。查看源代码发现，common模式下的所有配置是在Think/Libary/Think/Dispatcher.class.php中进行引入的，其中有如下代码，是完成MODULE中配置的加载的，有兴趣的同学可以自己看看 // 当前应用状态对应的配置文件 if(APP_STATUS &amp;amp;&amp;amp; is_file(MODULE_PATH.'Conf/'.APP_STATUS.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/'.APP_STATUS.CONF_EXT)); // 加载模块别名定义 if(is_file(MODULE_PATH.'Conf/alias.php')) Think::addMap(include MODULE_PATH.'Conf/alias.php'); // 加载模块tags文件定义 if(is_file(MODULE_PATH.'Conf/tags.php')) Hook::import(include MODULE_PATH.'Conf/tags.php'); // 加载模块函数文件 if(is_file(MODULE_PATH.'Common/function.php')) include MODULE_PATH.'Common/function.php'; // 加载模块的扩展配置文件 load_ext_file(MODULE_PATH); 同样找到Think/Mode/Api/Dispatcher.class.php,在合适的时机添加上述加载代码(本人TP3.2是在146行开始加的)，这样后就可加载MODULE中配置。 至此，所有的配置均已完成，下来我们来看看怎么操作。 目录结构 先看看我这边的目录结构吧，便于后续表述 PROJECT - APPS + module_1 + module_2 - Crons + crons.conf + curl_runloop.sh + daemon.sh + exec.php + runloop.sh + start.sh Crons就是我们的定时任务目录，这里我着重说一下Crons目录下各个文件的用途吧。 crons.conf 定时任务的配置文件，配置了要执行什么定时任务 curl_runloop.sh 通过url调用时的runloop脚本 daemon.sh 守护进程 runloop.sh 直接PHP调用的runloop脚本 exec.php命令执行脚本 如何执行 有了上面的铺垫，启动脚本其实很简单，如下： php exec.php script_path 这里做个简单的说明，比如我们之前的访问的URL如下： http://xxx.com/abc/controller/action 我们的script_path的值应该传: abc/controller/action 这样即可调用的我们的对应方法，完成后台执行 时间控制 定时任务肯定逃不过计划执行时间，轮训时间。这里我从controller层做了些许限制。当然也可以在runloop中去做。将配置信息写在crons.conf中。进行配置既可 建立一个用于执行定时任务的基类来统一处理调度和并发逻辑。需要能别后台调用起的定时任务需要继承该基类，完成基础功能。主要涉及的一下几个地方。 // cronbaseclass 实现 // 多少时间执行一次 protected $interval = 60; // 检测是否有权限调用 private function check() { if (PHP_SAPI != 'cli' &amp;amp;&amp;amp; !in_array(get_client_ip(),C('CRONS_BIND_IP'))) { exit('what a fucking day!'); } } // 入口方法 public function index() { set_time_limit(0); $exe_time = $this-&amp;gt;cron_config(CONTROLLER_NAME.ACTION_NAME); if ($exe_time &amp;lt; time()) { $this-&amp;gt;update_cron_config(CONTROLLER_NAME.ACTION_NAME,$this-&amp;gt;interval + time()); $lock_file = RUNTIME_PATH.md5(CONTROLLER_NAME.ACTION_NAME); if (empty(S($lock_file))) { S($lock_file,1,600); $this-&amp;gt;run(); S($lock_file,null); } } } // 子类逻辑执行方法 protected function run() {} runloop runloop 其实很简单，就是一个死循环，然后去读取配置文件，通过php exec.php xxx去执行脚本任务。特别需要注意的daemon.sh脚本，是我们统一守护进程。crontab中需要进行配置如下： # 守护进程守护runloop.sh进程，去执行release环境[APP_STATUS] * * * * * daemon.sh runloop.sh release 结语 到现在，我们所有的配置和执行方案已经分析完成。根据这些配置，大家可以灵活的组织各种定时情况。 其实每个框架都有自身的强大之处和不足，只要根据它的特性和设计方案出发，一般都能找到合适的方案。自己碰到的问题，相信框架的设计者也有所涉及。本文其实就是在TP的框架中做了一些小的改动来支持定时任务。 附录 crons.conf内容格式 Agreement/CCallback Agreement/Achive Agreement/SynchronizeStatus</summary></entry><entry><title type="html">ThinkPHP定时任务（一）</title><link href="http://localhost:4000/php/2017/01/23/ThinkPHP%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E4%B8%80.html" rel="alternate" type="text/html" title="ThinkPHP定时任务（一）" /><published>2017-01-23T00:00:00+08:00</published><updated>2017-01-23T00:00:00+08:00</updated><id>http://localhost:4000/php/2017/01/23/ThinkPHP%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1(%E4%B8%80)</id><content type="html" xml:base="http://localhost:4000/php/2017/01/23/ThinkPHP%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1-%E4%B8%80.html">&lt;p&gt;后台开发的过程中，免不了和定时任务打交道。每天定时的发短信给用户，定时的计算收益、利息，固定间隔的去执行某项大型任务（不适宜同步执行）等等，等等&lt;br /&gt;
常用的定时任务都是基于linux中的crontab进行，不过今天我们主要做TP框架内的定时任务实现解析，分析其实现原理和缺陷。在下一部分，会介绍一个新的方案&lt;/p&gt;

&lt;h3 id=&quot;行为扩展&quot;&gt;行为扩展&lt;/h3&gt;
&lt;p&gt;细心的朋友应该知道TP框架中有一个名叫行为扩展的东西。其实简单的概括起来就是HOOK,可以实现在某个时机进行HOOK，然后注册监听(Listen),实现代码和功能的无侵入式嵌入。行为扩展在我们的项目中使用的比较多，静态资源替换、错误模板替换（这个只有经历过才知道为什么）、自动初始化，太多的地方。总体来说，由于TP暴露了很多关键点的HOOK，我们在使用的时候，只需要去监听即可，所以使用起来还是很不错的。如果对行为扩展还有不了解的，可以去查看TP官方文档寻找答案&lt;/p&gt;

&lt;h3 id=&quot;基于行为扩展的定时任务&quot;&gt;基于行为扩展的定时任务&lt;/h3&gt;
&lt;p&gt;没错，TP的定时任务既是建立在自身的行为扩展的基础上的，如果了解了行为扩展的朋友，应该知道行为扩展只是一种变相的代码调用，所以问题就随之而来，什么时候触发定时任务？我们先来看看在框架内应该以什么样的姿势来打开Crons&lt;br /&gt;
一般情况下，我们做如下初始化：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Common/Conf/tags.php 文件&lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;'app_begin'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'Behavior\CronRunBehavior'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Common/Conf/tags.php 文件用于快速的注册行为扩展，跟HOOK有异曲同工之处。由于这个方法比较简洁方便，且对于框架代码无嵌入，值得使用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个注册的意思是在程序启动的时候，直接调用&lt;code class=&quot;highlighter-rouge&quot;&gt;Behavior\CronRunBehavior&lt;/code&gt;脚本，而&lt;code class=&quot;highlighter-rouge&quot;&gt;Behavior\CronRunBehavior&lt;/code&gt;脚本的任务既是对定时任务的调用&lt;/p&gt;

&lt;h3 id=&quot;时间间隔&quot;&gt;时间间隔&lt;/h3&gt;
&lt;p&gt;做定时任务，肯定要关心调用频次，这里我们看下&lt;code class=&quot;highlighter-rouge&quot;&gt;CronRunBehaviorController&lt;/code&gt;的实现代码来简单的分析下这个定时任务的实现逻辑&lt;br /&gt;
如下代码:&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// 锁定自动执行&lt;/span&gt;
 &lt;span class=&quot;nv&quot;&gt;$lockfile&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;nx&quot;&gt;RUNTIME_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cron.lock'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;is_writable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lockfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;filemtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lockfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'REQUEST_TIME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CRON_MAX_TIME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$lockfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;set_time_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 即使客户端断开连接，也要继续执行&lt;/span&gt;
 &lt;span class=&quot;nb&quot;&gt;ignore_user_abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这段代码的意思是，在执行&lt;code class=&quot;highlighter-rouge&quot;&gt;CronRunBehaviorController&lt;/code&gt;前，大概分为如下流程:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;判断是否有锁文件，如果没有则创建锁文件，进行下一步，如有进行第2步&lt;/li&gt;
  &lt;li&gt;判断所文件的创建时间是否和当前时间间隔超过我们设置的时间间隔&lt;code class=&quot;highlighter-rouge&quot;&gt;CRON_MAX_TIME&lt;/code&gt;，默认为60s，如果超过则进行下一步，反之不执行，直接退出&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;再看下面代码：&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;is_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RUNTIME_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'~crons.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$crons&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RUNTIME_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'~crons.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;is_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;COMMON_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Conf/crons.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$crons&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;COMMON_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Conf/crons.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这块代码可以看出来我们的定时任务配置是在&lt;code class=&quot;highlighter-rouge&quot;&gt;Conf/crons.php&lt;/code&gt;路径下，有runtime缓存，每次修改需要清除缓存，这里比较简单，我来贴上&lt;code class=&quot;highlighter-rouge&quot;&gt;Conf/crons.php&lt;/code&gt;的配置即可&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'callback'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Agreement/Cron/call_back.php'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;其中&lt;code class=&quot;highlighter-rouge&quot;&gt;callback&lt;/code&gt;是任务脚本名称，而对于的value则是任务脚本的配置&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;'Agreement/Cron/call_back.php'&lt;/code&gt;为具体执行脚本，依次为间隔时间，上次执行时间&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;至此，我们的基于TP的定时任务已经全部准备就绪。&lt;/p&gt;

&lt;h3 id=&quot;写在最后&quot;&gt;写在最后&lt;/h3&gt;

&lt;h4 id=&quot;优势&quot;&gt;优势&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;方便使用，如果是用TP实现的代码逻辑，全部逻辑都可以复用&lt;/li&gt;
  &lt;li&gt;不用考虑实现具体调用细节，只需要按照规范来写就行&lt;/li&gt;
  &lt;li&gt;所有的参数都比较直白，不用和crontab中的星星打交道&lt;/li&gt;
  &lt;li&gt;对时效性不强的简单定时任务可以首选&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;缺点&quot;&gt;缺点&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;由实现逻辑可以看出，每次脚本的启动都是由客户触发，不能保证稳定的时间间隔&lt;/li&gt;
  &lt;li&gt;配置时间不是很灵活（之前为了使用，也做了些许扩展）&lt;/li&gt;
  &lt;li&gt;同步执行，很影响使用这的执行效率，如果任务脚本比较大，则会极度影响用户体验&lt;/li&gt;
  &lt;li&gt;文件锁的方式虽然好用，但是对于分布式系统，无法做到锁功能&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;尝试过的改造&quot;&gt;尝试过的改造&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;对配置文件进行了升级，支持间隔时间的配置&lt;/li&gt;
  &lt;li&gt;对执行方式进行了改造，支持基于pcntl的多进程调用，由于主进程需要先结束，为了实现逻辑最后造成进程混乱，不是很可取。&lt;/li&gt;
  &lt;li&gt;使用redis对执行加锁，完成分布式锁&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述改造，由于第三点不好处理（也是最重要的一点），遂另辟蹊径，采用了另一种方式来处理。下一章节，我会对这个进行详细说明！&lt;/p&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="PHP" /><category term="PHP" /><category term="ThinkPHP" /><summary type="html">后台开发的过程中，免不了和定时任务打交道。每天定时的发短信给用户，定时的计算收益、利息，固定间隔的去执行某项大型任务（不适宜同步执行）等等，等等 常用的定时任务都是基于linux中的crontab进行，不过今天我们主要做TP框架内的定时任务实现解析，分析其实现原理和缺陷。在下一部分，会介绍一个新的方案 行为扩展 细心的朋友应该知道TP框架中有一个名叫行为扩展的东西。其实简单的概括起来就是HOOK,可以实现在某个时机进行HOOK，然后注册监听(Listen),实现代码和功能的无侵入式嵌入。行为扩展在我们的项目中使用的比较多，静态资源替换、错误模板替换（这个只有经历过才知道为什么）、自动初始化，太多的地方。总体来说，由于TP暴露了很多关键点的HOOK，我们在使用的时候，只需要去监听即可，所以使用起来还是很不错的。如果对行为扩展还有不了解的，可以去查看TP官方文档寻找答案 基于行为扩展的定时任务 没错，TP的定时任务既是建立在自身的行为扩展的基础上的，如果了解了行为扩展的朋友，应该知道行为扩展只是一种变相的代码调用，所以问题就随之而来，什么时候触发定时任务？我们先来看看在框架内应该以什么样的姿势来打开Crons 一般情况下，我们做如下初始化： // Common/Conf/tags.php 文件 'app_begin'=&amp;gt;array( 'Behavior\CronRunBehavior' ), Common/Conf/tags.php 文件用于快速的注册行为扩展，跟HOOK有异曲同工之处。由于这个方法比较简洁方便，且对于框架代码无嵌入，值得使用 这个注册的意思是在程序启动的时候，直接调用Behavior\CronRunBehavior脚本，而Behavior\CronRunBehavior脚本的任务既是对定时任务的调用 时间间隔 做定时任务，肯定要关心调用频次，这里我们看下CronRunBehaviorController的实现代码来简单的分析下这个定时任务的实现逻辑 如下代码: // 锁定自动执行 $lockfile = RUNTIME_PATH.'cron.lock'; if(is_writable($lockfile) &amp;amp;&amp;amp; filemtime($lockfile) &amp;gt; $_SERVER['REQUEST_TIME'] - C('CRON_MAX_TIME',null,60)) { return ; } else { touch($lockfile); } set_time_limit(1000); // 即使客户端断开连接，也要继续执行 ignore_user_abort(true); 这段代码的意思是，在执行CronRunBehaviorController前，大概分为如下流程: 判断是否有锁文件，如果没有则创建锁文件，进行下一步，如有进行第2步 判断所文件的创建时间是否和当前时间间隔超过我们设置的时间间隔CRON_MAX_TIME，默认为60s，如果超过则进行下一步，反之不执行，直接退出 再看下面代码： if(is_file(RUNTIME_PATH.'~crons.php')) { $crons = include RUNTIME_PATH.'~crons.php'; }elseif(is_file(COMMON_PATH.'Conf/crons.php')){ $crons = include COMMON_PATH.'Conf/crons.php'; } 这块代码可以看出来我们的定时任务配置是在Conf/crons.php路径下，有runtime缓存，每次修改需要清除缓存，这里比较简单，我来贴上Conf/crons.php的配置即可 return [ 'callback' =&amp;gt; array('Agreement/Cron/call_back.php', 0.1), ]; 其中callback是任务脚本名称，而对于的value则是任务脚本的配置 'Agreement/Cron/call_back.php'为具体执行脚本，依次为间隔时间，上次执行时间 至此，我们的基于TP的定时任务已经全部准备就绪。 写在最后 优势 方便使用，如果是用TP实现的代码逻辑，全部逻辑都可以复用 不用考虑实现具体调用细节，只需要按照规范来写就行 所有的参数都比较直白，不用和crontab中的星星打交道 对时效性不强的简单定时任务可以首选 缺点 由实现逻辑可以看出，每次脚本的启动都是由客户触发，不能保证稳定的时间间隔 配置时间不是很灵活（之前为了使用，也做了些许扩展） 同步执行，很影响使用这的执行效率，如果任务脚本比较大，则会极度影响用户体验 文件锁的方式虽然好用，但是对于分布式系统，无法做到锁功能 尝试过的改造 对配置文件进行了升级，支持间隔时间的配置 对执行方式进行了改造，支持基于pcntl的多进程调用，由于主进程需要先结束，为了实现逻辑最后造成进程混乱，不是很可取。 使用redis对执行加锁，完成分布式锁 上述改造，由于第三点不好处理（也是最重要的一点），遂另辟蹊径，采用了另一种方式来处理。下一章节，我会对这个进行详细说明！</summary></entry><entry><title type="html">2016年终总结</title><link href="http://localhost:4000/%E6%84%9F%E6%82%9F/2016/12/31/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html" rel="alternate" type="text/html" title="2016年终总结" /><published>2016-12-31T00:00:00+08:00</published><updated>2016-12-31T00:00:00+08:00</updated><id>http://localhost:4000/%E6%84%9F%E6%82%9F/2016/12/31/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93</id><content type="html" xml:base="http://localhost:4000/%E6%84%9F%E6%82%9F/2016/12/31/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html">&lt;p&gt;不忘初心，以己为镜，继续努力！&lt;/p&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="感悟" /><category term="心得" /><category term="感悟" /><summary type="html">不忘初心，以己为镜，继续努力！</summary></entry><entry><title type="html">PHP秘钥管理</title><link href="http://localhost:4000/php/2016/11/01/PHP%E7%A7%98%E9%92%A5%E7%AE%A1%E7%90%86.html" rel="alternate" type="text/html" title="PHP秘钥管理" /><published>2016-11-01T00:00:00+08:00</published><updated>2016-11-01T00:00:00+08:00</updated><id>http://localhost:4000/php/2016/11/01/PHP%E7%A7%98%E9%92%A5%E7%AE%A1%E7%90%86</id><content type="html" xml:base="http://localhost:4000/php/2016/11/01/PHP%E7%A7%98%E9%92%A5%E7%AE%A1%E7%90%86.html">&lt;p&gt;做过PHP开发的同学们都应该有这么一个认识，PHP代码中的所有东西对开发者都是不透明的。只要有代码就可以看到所有的配置信息，但是这样会存在什么样的问题呢？前段时间也对此类问题做了些许思考，并提供了一个目前来看比较好的解决方案。&lt;/p&gt;

&lt;h3 id=&quot;现状&quot;&gt;现状&lt;/h3&gt;
&lt;p&gt;目前比较常用的存储秘钥的方法，大致可分为如下几种：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;密钥明文存储到在代码文件&lt;/li&gt;
  &lt;li&gt;密钥明文存储在某个隐蔽的地方&lt;/li&gt;
  &lt;li&gt;加密后存储，加密算法暴露&lt;/li&gt;
  &lt;li&gt;密钥服务器&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;针对以上几种方式，其实每种都不是一个完美的解决方案。将密钥明文存储到在代码文件中，是最直观，最直接的做法。相信很多项目中也还是这么做的。这样最大的缺陷就是秘钥直接暴露，完全没有隐私。密钥明文存储在某个隐蔽的地方，算是一种比较好的方法，将秘钥存在服务器上的某个地方，用部署脚本部署秘钥，但是存在服务器泄露的风险。加密后存储，加密算法暴露，其实就是掩耳盗铃！密钥服务器，属于风险转嫁，将风险转嫁给秘钥服务器，但是每次获取秘钥都需要和秘钥服务器有次交互，增加系统负担！&lt;/p&gt;

&lt;h3 id=&quot;可以怎么做&quot;&gt;可以怎么做&lt;/h3&gt;
&lt;p&gt;基于上述原因，我们最终确定了我们解决方案–基于PHP扩展的秘钥存储&lt;br /&gt;
大致流程如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生成一对RSA的公钥、私钥&lt;/li&gt;
  &lt;li&gt;将公钥打包进一个工具组件keychain&lt;/li&gt;
  &lt;li&gt;将私钥以PHP扩展的形式打包进我们的PHP扩展的秘钥存储中&lt;/li&gt;
  &lt;li&gt;需要添加私密内容时用keychain加密明文，产生私钥文件&lt;/li&gt;
  &lt;li&gt;将私钥文件注册给PHP秘钥扩展，然后直接获取，即可得到明文数据&lt;/li&gt;
&lt;/ul&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="PHP" /><category term="PHP" /><category term="Keychain" /><summary type="html">做过PHP开发的同学们都应该有这么一个认识，PHP代码中的所有东西对开发者都是不透明的。只要有代码就可以看到所有的配置信息，但是这样会存在什么样的问题呢？前段时间也对此类问题做了些许思考，并提供了一个目前来看比较好的解决方案。 现状 目前比较常用的存储秘钥的方法，大致可分为如下几种： 密钥明文存储到在代码文件 密钥明文存储在某个隐蔽的地方 加密后存储，加密算法暴露 密钥服务器 针对以上几种方式，其实每种都不是一个完美的解决方案。将密钥明文存储到在代码文件中，是最直观，最直接的做法。相信很多项目中也还是这么做的。这样最大的缺陷就是秘钥直接暴露，完全没有隐私。密钥明文存储在某个隐蔽的地方，算是一种比较好的方法，将秘钥存在服务器上的某个地方，用部署脚本部署秘钥，但是存在服务器泄露的风险。加密后存储，加密算法暴露，其实就是掩耳盗铃！密钥服务器，属于风险转嫁，将风险转嫁给秘钥服务器，但是每次获取秘钥都需要和秘钥服务器有次交互，增加系统负担！ 可以怎么做 基于上述原因，我们最终确定了我们解决方案–基于PHP扩展的秘钥存储 大致流程如下： 生成一对RSA的公钥、私钥 将公钥打包进一个工具组件keychain 将私钥以PHP扩展的形式打包进我们的PHP扩展的秘钥存储中 需要添加私密内容时用keychain加密明文，产生私钥文件 将私钥文件注册给PHP秘钥扩展，然后直接获取，即可得到明文数据</summary></entry><entry><title type="html">PhpStorm 代码审查</title><link href="http://localhost:4000/php/2016/08/30/PhpStorm-%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5.html" rel="alternate" type="text/html" title="PhpStorm 代码审查" /><published>2016-08-30T00:00:00+08:00</published><updated>2016-08-30T00:00:00+08:00</updated><id>http://localhost:4000/php/2016/08/30/PhpStorm%20%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5</id><content type="html" xml:base="http://localhost:4000/php/2016/08/30/PhpStorm-%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5.html">&lt;p&gt;PHP的自动类型转换(弱类型)使我们在开发过程中确实尝到了不少甜头，然后由于语言的松散性(个人杜撰用词，PHP是全宇宙最牛逼的语言)，也使我们在开发过程中碰到不少让人追悔莫及的问题，这篇文字旨在帮助自己总结IDE是如何帮助自己避免一些潜在问题的&lt;/p&gt;

&lt;h3 id=&quot;手抖问题&quot;&gt;手抖问题&lt;/h3&gt;
&lt;p&gt;先看下面代码&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$condition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ok'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里我们的本意是当$condition的值为&lt;strong&gt;ok&lt;/strong&gt;时，进入判断逻辑内。但是由于我们手抖少写了一个等号，结果的变成了每次后悔执行&lt;strong&gt;do something&lt;/strong&gt;操作&lt;br /&gt;
当然如果我们有良好的编码习惯，这类问题是可以直接避免的，我们可以做到在判断语句中，始终将常亮放到等式的左边，例如&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ok'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样就是一个典型的赋值错误，我们即可立即发现并处理&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;php中的赋值操作的结果为等式右值，上述if内的判断则变成了’ok’,所以始终判断结果为ture&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;再看下面的代码&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//do something&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个问题同样悲剧，由于变量$nam没有定义，所以会导致每次都对进入判断内部&lt;/p&gt;

&lt;p&gt;同样还有如下代码&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'3'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;显而易见，少了break，本来只会echo一次的代码，再name==’1’时echo 了3次&lt;/p&gt;

&lt;h3 id=&quot;如何处理&quot;&gt;如何处理&lt;/h3&gt;
&lt;p&gt;通过PhpStorm的inspect code 可以帮助我们有效的避免此类潜在的bug。其实PhpStorm在我们使用的过程中本身就会实时的帮我们指出我们可能出现的问题，但是并不是所有的风险PhpStorm都会帮我们指出来。如果需要PhpStorm更加严格的inspect code，我们可以在PhpStorm中做简单的设置&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/PhpStorm 代码审查/Snip20160830_1.png&quot; alt=&quot;整体框架&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，我们也可以根据自身的需求，配置自己的审查方案，大家自行探索吧&lt;/p&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="PHP" /><category term="apache" /><category term="php" /><category term="PhpStorm" /><summary type="html">PHP的自动类型转换(弱类型)使我们在开发过程中确实尝到了不少甜头，然后由于语言的松散性(个人杜撰用词，PHP是全宇宙最牛逼的语言)，也使我们在开发过程中碰到不少让人追悔莫及的问题，这篇文字旨在帮助自己总结IDE是如何帮助自己避免一些潜在问题的 手抖问题 先看下面代码 if ($condition = 'ok') { //do something } 这里我们的本意是当$condition的值为ok时，进入判断逻辑内。但是由于我们手抖少写了一个等号，结果的变成了每次后悔执行do something操作 当然如果我们有良好的编码习惯，这类问题是可以直接避免的，我们可以做到在判断语句中，始终将常亮放到等式的左边，例如 if ('ok' = $condition) { //do something } 这样就是一个典型的赋值错误，我们即可立即发现并处理 php中的赋值操作的结果为等式右值，上述if内的判断则变成了’ok’,所以始终判断结果为ture 再看下面的代码 $name = $_REQUEST['name']; if (empty($nam)) { //do something } 这个问题同样悲剧，由于变量$nam没有定义，所以会导致每次都对进入判断内部 同样还有如下代码 switch ($name) { case '1' : echo 1; case '2' : echo 2; case '3' : echo 3; } 显而易见，少了break，本来只会echo一次的代码，再name==’1’时echo 了3次 如何处理 通过PhpStorm的inspect code 可以帮助我们有效的避免此类潜在的bug。其实PhpStorm在我们使用的过程中本身就会实时的帮我们指出我们可能出现的问题，但是并不是所有的风险PhpStorm都会帮我们指出来。如果需要PhpStorm更加严格的inspect code，我们可以在PhpStorm中做简单的设置 当然，我们也可以根据自身的需求，配置自己的审查方案，大家自行探索吧</summary></entry><entry><title type="html">谈谈session</title><link href="http://localhost:4000/sessoin%20web/2016/03/15/%E8%B0%88%E8%B0%88session.html" rel="alternate" type="text/html" title="谈谈session" /><published>2016-03-15T00:00:00+08:00</published><updated>2016-03-15T00:00:00+08:00</updated><id>http://localhost:4000/sessoin%20web/2016/03/15/%E8%B0%88%E8%B0%88session</id><content type="html" xml:base="http://localhost:4000/sessoin%20web/2016/03/15/%E8%B0%88%E8%B0%88session.html">&lt;p&gt;做互联网开发的同学，想必都对session有所了解。session我们可以理解为是一个会话，能确定服务的访问者当前的状态或者身份，也可以理解为是当前访问者的一些相关数据。最近由于项目中碰到了一些关于session处理的内容，索性将session相关的东西总结下，以备将来回顾。&lt;/p&gt;

&lt;h3 id=&quot;什么是session&quot;&gt;什么是session&lt;/h3&gt;
&lt;p&gt;在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在 Session 对象中。&lt;/p&gt;

&lt;h3 id=&quot;session的工作机制&quot;&gt;session的工作机制&lt;/h3&gt;
&lt;p&gt;session的工作机制大致如下图所示：
&lt;img src=&quot;/images/谈谈session/session_1.png&quot; alt=&quot;session的工作机制&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端发出请求&lt;/li&gt;
  &lt;li&gt;服务端获取客户端cookies，根据session id获取对应的session&lt;/li&gt;
  &lt;li&gt;如果没有session id则生成session_id&lt;/li&gt;
  &lt;li&gt;将session_id下发给客户端，客户端保存至cookies中，以备下次使用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以PHP为例，每次我们执行完脚本后会将当前会话的session信息全部重写一遍，所以我们就不用担心在使用的过程中session过期情况的。&lt;/p&gt;

&lt;h3 id=&quot;session的生命周期&quot;&gt;session的生命周期&lt;/h3&gt;
&lt;p&gt;session的生命周期针对各个语言，平台，相差不会很大。这里以PHP为例，做一些说明
PHP中session的生命周期相关到几个callback&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;open,open 回调函数类似于类的构造函数， 在会话打开的时候会被调用。 这是自动开始会话或者通过调用 session_start() 手动开始会话 之后第一个被调用的回调函数。 此回调函数操作成功返回 TRUE，反之返回 FALSE。&lt;/li&gt;
  &lt;li&gt;close,close 回调函数类似于类的析构函数。 在 write 回调函数调用之后调用。 当调用 session_write_close() 函数之后，也会调用 close 回调函数。 此回调函数操作成功返回 TRUE，反之返回 FALSE。&lt;/li&gt;
  &lt;li&gt;read，如果会话中有数据，read 回调函数必须返回将会话数据编码（序列化）后的字符串。 如果会话中没有数据，read 回调函数返回空字符串。&lt;/li&gt;
  &lt;li&gt;write,在会话保存数据时会调用 write 回调函数。 此回调函数接收当前会话 ID 以及 $_SESSION 中数据序列化之后的字符串作为参数。 序列化会话数据的过程由 PHP 根据 session.serialize_handler 设定值来完成。&lt;/li&gt;
  &lt;li&gt;destroy，当调用 session_destroy() 函数， 或者调用 session_regenerate_id() 函数并且设置 destroy 参数为 TRUE 时， 会调用此回调函数。此回调函数操作成功返回 TRUE，反之返回 FALSE。&lt;/li&gt;
  &lt;li&gt;gc,为了清理会话中的旧数据，PHP 会不时的调用垃圾收集回调函数。 调用周期由 session.gc_probability 和 session.gc_divisor 参数控制。 传入到此回调函数的 lifetime 参数由 session.gc_maxlifetime 设置。 此回调函数操作成功返回 TRUE，反之返回 FALSE。&lt;/li&gt;
  &lt;li&gt;create_sid，当需要新的会话 ID 时被调用的回调函数。 回调函数被调用时无传入参数， 其返回值应该是一个字符串格式的、有效的会话 ID。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;流程如下:
&lt;img src=&quot;/images/谈谈session/session_2.png&quot; alt=&quot;session的生命周期&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，相信大家对session已经有了个整体的了解。&lt;/p&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="sessoin web" /><category term="sessoin" /><summary type="html">做互联网开发的同学，想必都对session有所了解。session我们可以理解为是一个会话，能确定服务的访问者当前的状态或者身份，也可以理解为是当前访问者的一些相关数据。最近由于项目中碰到了一些关于session处理的内容，索性将session相关的东西总结下，以备将来回顾。 什么是session 在计算机中，尤其是在网络应用中，称为“会话控制”。Session 对象存储特定用户会话所需的信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量将不会丢失，而是在整个用户会话中一直存在下去。当用户请求来自应用程序的 Web 页时，如果该用户还没有会话，则 Web 服务器将自动创建一个 Session 对象。当会话过期或被放弃后，服务器将终止该会话。Session 对象最常见的一个用法就是存储用户的首选项。例如，如果用户指明不喜欢查看图形，就可以将该信息存储在 Session 对象中。 session的工作机制 session的工作机制大致如下图所示： 客户端发出请求 服务端获取客户端cookies，根据session id获取对应的session 如果没有session id则生成session_id 将session_id下发给客户端，客户端保存至cookies中，以备下次使用 以PHP为例，每次我们执行完脚本后会将当前会话的session信息全部重写一遍，所以我们就不用担心在使用的过程中session过期情况的。 session的生命周期 session的生命周期针对各个语言，平台，相差不会很大。这里以PHP为例，做一些说明 PHP中session的生命周期相关到几个callback open,open 回调函数类似于类的构造函数， 在会话打开的时候会被调用。 这是自动开始会话或者通过调用 session_start() 手动开始会话 之后第一个被调用的回调函数。 此回调函数操作成功返回 TRUE，反之返回 FALSE。 close,close 回调函数类似于类的析构函数。 在 write 回调函数调用之后调用。 当调用 session_write_close() 函数之后，也会调用 close 回调函数。 此回调函数操作成功返回 TRUE，反之返回 FALSE。 read，如果会话中有数据，read 回调函数必须返回将会话数据编码（序列化）后的字符串。 如果会话中没有数据，read 回调函数返回空字符串。 write,在会话保存数据时会调用 write 回调函数。 此回调函数接收当前会话 ID 以及 $_SESSION 中数据序列化之后的字符串作为参数。 序列化会话数据的过程由 PHP 根据 session.serialize_handler 设定值来完成。 destroy，当调用 session_destroy() 函数， 或者调用 session_regenerate_id() 函数并且设置 destroy 参数为 TRUE 时， 会调用此回调函数。此回调函数操作成功返回 TRUE，反之返回 FALSE。 gc,为了清理会话中的旧数据，PHP 会不时的调用垃圾收集回调函数。 调用周期由 session.gc_probability 和 session.gc_divisor 参数控制。 传入到此回调函数的 lifetime 参数由 session.gc_maxlifetime 设置。 此回调函数操作成功返回 TRUE，反之返回 FALSE。 create_sid，当需要新的会话 ID 时被调用的回调函数。 回调函数被调用时无传入参数， 其返回值应该是一个字符串格式的、有效的会话 ID。 流程如下: 至此，相信大家对session已经有了个整体的了解。</summary></entry><entry><title type="html">nginx vhost</title><link href="http://localhost:4000/nginx%20vhost%20web/2016/03/10/nginx-vhost.html" rel="alternate" type="text/html" title="nginx vhost" /><published>2016-03-10T00:00:00+08:00</published><updated>2016-03-10T00:00:00+08:00</updated><id>http://localhost:4000/nginx%20vhost%20web/2016/03/10/nginx-vhost</id><content type="html" xml:base="http://localhost:4000/nginx%20vhost%20web/2016/03/10/nginx-vhost.html">&lt;p&gt;在服务器架构上，一般我们会选用LAMP或者LNMP的配置。前面我们说明了一些关于apache配置的东西，这里大概描述下nginx的配置。关于怎么安装LNMP这里就不做赘述，网上也存在很多教程。&lt;/p&gt;

&lt;h3 id=&quot;nginx配置文件&quot;&gt;nginx配置文件&lt;/h3&gt;
&lt;p&gt;nginx的配置文件，一般都存在于nginx目录下的conf目录。如下图所示
&lt;img src=&quot;/images/nginx vhost/Snip20160403_1.png&quot; alt=&quot;nginx vhost&quot; /&gt;
所有的配置都可以在此设置&lt;/p&gt;

&lt;h3 id=&quot;配置vhost&quot;&gt;配置vhost&lt;/h3&gt;
&lt;p&gt;nginx的vhost配置文件存在于conf/vhost目录，结构如下
&lt;img src=&quot;/images/nginx vhost/Snip20160403_2.png&quot; alt=&quot;nginx vhost&quot; /&gt;
我们可以为每个虚拟主机路径建立一个文件，当然文件名没有什么特殊的要求，只要以conf结尾即可。一般我们会起一个容易标示的名字。&lt;/p&gt;

&lt;h4 id=&quot;配置说明&quot;&gt;配置说明&lt;/h4&gt;
&lt;p&gt;首先我们来看看phabricator.conf的内容&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  server_name phabricator.powell.com&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  root        /alidata/www/phabricator/webroot&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    index index.php&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    rewrite ^/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/index.php?__path__&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; last&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  location &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /favicon.ico &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    try_files &lt;span class=&quot;nv&quot;&gt;$uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;204&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  location /index.php &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    fastcgi_pass   localhost:9000&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    fastcgi_index   index.php&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#required if PHP was built with --enable-force-cgi-redirect&lt;/span&gt;
    fastcgi_param  REDIRECT_STATUS    200&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;#variables to make the $_SERVER populate in PHP&lt;/span&gt;
    fastcgi_param  SCRIPT_FILENAME    &lt;span class=&quot;nv&quot;&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    fastcgi_param  QUERY_STRING       &lt;span class=&quot;nv&quot;&gt;$query_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    fastcgi_param  REQUEST_METHOD     &lt;span class=&quot;nv&quot;&gt;$request_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    fastcgi_param  CONTENT_TYPE       &lt;span class=&quot;nv&quot;&gt;$content_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    fastcgi_param  CONTENT_LENGTH     &lt;span class=&quot;nv&quot;&gt;$content_length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    fastcgi_param  SCRIPT_NAME        &lt;span class=&quot;nv&quot;&gt;$fastcgi_script_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    fastcgi_param  GATEWAY_INTERFACE  CGI/1.1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    fastcgi_param  SERVER_SOFTWARE    nginx/&lt;span class=&quot;nv&quot;&gt;$nginx_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    fastcgi_param  REMOTE_ADDR        &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;server_name&lt;/em&gt;&lt;/strong&gt;可以理解我们部署的host，如果有多个url指向同一地址的话，只需要输入多个host，以空格隔开即可&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;root&lt;/em&gt;&lt;/strong&gt;表示我们部署的文件路径，DocumnetPath&lt;/p&gt;

&lt;p&gt;注意下面这段配置&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    index index.php&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    rewrite ^/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;/index.php?__path__&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; last&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;表示当我们在进入&lt;strong&gt;phabricator.powell.com&lt;/strong&gt;时，我们的index文件为&lt;strong&gt;/alidata/www/phabricator/webroot&lt;/strong&gt;路径下的&lt;strong&gt;index.php&lt;/strong&gt;,也就是我们的默认入口文件；而大括弧内的&lt;strong&gt;rewrite&lt;/strong&gt;则表示我们的重写规则，会将&lt;strong&gt;phabricator.powell.com/abc/def/ghi/mn&lt;/strong&gt;重写为&lt;strong&gt;phabricator.powell.com/index.php?__path__=abc/def/ghi/mn&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;location /index.php&lt;/strong&gt;这个部分则配置了一些关于fastCGI的东西。由于nginx默认不解析PHP代码，所以我们需要fastCGI的支持，关于fastCGI在后面我会着重介绍下。&lt;/p&gt;

&lt;h3 id=&quot;配置hosts或者解析规则&quot;&gt;配置hosts或者解析规则&lt;/h3&gt;
&lt;p&gt;如果我们是本地开发而并没有真实的域名的话，就如笔者这里&lt;strong&gt;phabricator.powell.com&lt;/strong&gt;，我们则需要在访问机器上将该域名指向到服务器&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1 phabricator.powell.com&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/hosts&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当然如果我们是现有域名的话，只需要在域名服务商处添加解析规则即可，一般10分钟左右生效，如果比较着急也可以先手动指定host&lt;/p&gt;

&lt;p&gt;重启nginx&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service nginx restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;重启php-fpm(FastCGI Process Manager：FastCGI进程管理器)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;service php-fpm restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;至此我们的nginx vhost配置已经完成&lt;/p&gt;</content><author><name>codecooker</name><email>codecooker@outlook.com</email></author><category term="nginx vhost web" /><category term="nginx" /><summary type="html">在服务器架构上，一般我们会选用LAMP或者LNMP的配置。前面我们说明了一些关于apache配置的东西，这里大概描述下nginx的配置。关于怎么安装LNMP这里就不做赘述，网上也存在很多教程。 nginx配置文件 nginx的配置文件，一般都存在于nginx目录下的conf目录。如下图所示 所有的配置都可以在此设置 配置vhost nginx的vhost配置文件存在于conf/vhost目录，结构如下 我们可以为每个虚拟主机路径建立一个文件，当然文件名没有什么特殊的要求，只要以conf结尾即可。一般我们会起一个容易标示的名字。 配置说明 首先我们来看看phabricator.conf的内容 server { server_name phabricator.powell.com; root /alidata/www/phabricator/webroot; location / { index index.php; rewrite ^/(.*)$ /index.php?__path__=/$1 last; } location = /favicon.ico { try_files $uri =204; } location /index.php { fastcgi_pass localhost:9000; fastcgi_index index.php; #required if PHP was built with --enable-force-cgi-redirect fastcgi_param REDIRECT_STATUS 200; #variables to make the $_SERVER populate in PHP fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param QUERY_STRING $query_string; fastcgi_param REQUEST_METHOD $request_method; fastcgi_param CONTENT_TYPE $content_type; fastcgi_param CONTENT_LENGTH $content_length; fastcgi_param SCRIPT_NAME $fastcgi_script_name; fastcgi_param GATEWAY_INTERFACE CGI/1.1; fastcgi_param SERVER_SOFTWARE nginx/$nginx_version; fastcgi_param REMOTE_ADDR $remote_addr; } } server_name可以理解我们部署的host，如果有多个url指向同一地址的话，只需要输入多个host，以空格隔开即可 root表示我们部署的文件路径，DocumnetPath 注意下面这段配置 location / { index index.php; rewrite ^/(.*)$ /index.php?__path__=/$1 last; } 表示当我们在进入phabricator.powell.com时，我们的index文件为/alidata/www/phabricator/webroot路径下的index.php,也就是我们的默认入口文件；而大括弧内的rewrite则表示我们的重写规则，会将phabricator.powell.com/abc/def/ghi/mn重写为phabricator.powell.com/index.php?__path__=abc/def/ghi/mn location /index.php这个部分则配置了一些关于fastCGI的东西。由于nginx默认不解析PHP代码，所以我们需要fastCGI的支持，关于fastCGI在后面我会着重介绍下。 配置hosts或者解析规则 如果我们是本地开发而并没有真实的域名的话，就如笔者这里phabricator.powell.com，我们则需要在访问机器上将该域名指向到服务器 sudo echo &quot;127.0.0.1 phabricator.powell.com&quot; &amp;gt;&amp;gt; /etc/hosts 当然如果我们是现有域名的话，只需要在域名服务商处添加解析规则即可，一般10分钟左右生效，如果比较着急也可以先手动指定host 重启nginx sudo service nginx restart 重启php-fpm(FastCGI Process Manager：FastCGI进程管理器) sudo service php-fpm restart 至此我们的nginx vhost配置已经完成</summary></entry></feed>